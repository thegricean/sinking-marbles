// fully bayesian prior elicitaiton
// to run: webppl priors.wppl --require-js ./utils


// helpers
var mapObject = function(fn, obj){  
  return _.object(
    map(
      function(kv){
        return [kv[0], fn(kv[0], kv[1])]
      }, 
      _.pairs(obj))
  );
}

var flatmapObject = function(fn, obj){  
  return map(
      function(kv){
        return fn(kv[0], kv[1])
      }, 
      _.pairs(obj))
}

var printERP = function(myERP){
  return map(
          function(value){
            value.concat(Math.exp(myERP.score([], value)))
          },
          myERP.support([]))
}

// define states 0-15
var states = utils.sequence(0,15,1)
// get items from file
var items = utils.readinNumberTask()[0]

// define items 1 - 90
//var items = utils.sequence(1,90,1)

// for each item.
// each state has a uniform(0,1) prior
var generatePriorInTheSky = function(){
	var unnormed = repeat(16, function(){return sample(uniformERP,[0,1])})
	return utils.normalize(unnormed)
}




// read in number task data
var ntData = utils.readinNumberTask()[1]

// read in binnedhist data

var bhData = utils.readinBinnedHist()


var nSubj_nt = _.keys(ntData).length-1

var nSubj_bh = _.keys(bhData).length-1

// linking functions
var numberTask = cache(function(itemPrior,alpha){
	Enumerate(function(){
	 	var distoredDistribution = utils.raiseToPower(_.values(itemPrior),alpha)
	 	return discrete(distoredDistribution)
	})
})

var binnedHistTask = function(itemPrior,offset, scale){
	Enumerate(function(){
		var logitP = utils.logitDistribution(_.values(itemPrior))
		var distortedP = utils.logisticDistribution(logitP, offset, scale)
		return distortedP
	})
}

var inferPrITS = function(){

	// form is: {"item1":{"state0":prob, 
	//						..., 
	//						"state15":prob},
	//			...,
	//			"item90":{"state0":prob, 
	//						..., 
	//						"state15":prob}}
	var priorInTheSky = _.object(
		_.zip(items, 
			  repeat(items.length, 
							function(){
								return _.object(
									_.zip(states, generatePriorInTheSky())
					)})
		)
	)

	// for the "number task":
	// each subject has some "softmax" parameter
	// uniformly distributed between 0 and +Infinity (or 100)

	// var subjectAlphas = _.object(map(function(subj){
	// 	return ['s'+subj, sample(uniformERP,[0,5])]
	// }, utils.sequence(0,nSubj_nt,1)))


	// or, more crudely, there is just 1 alpha
	var alpha = sample(uniformERP,[0,5])
	var subjectAlphas = _.object(map(function(subj){
		return ['s'+subj, alpha]
	}, utils.sequence(0,nSubj_nt,1)))


	mapObject(
		function(subjID,subjAlpha){

			mapObject(function(itemID,response_number){
			 	
			 	var subjectPredictions = response_number=='-1' ? null:
					numberTask(priorInTheSky[itemID], subjAlpha)

				response_number=='-1' ? null: 
				 	factor(subjectPredictions.score([], response_number))
			 }, 
			 ntData[subjID])
			//var subjectPredictions = numberTask(subjAlpha)
//			subjectPredictions.score()

		}, 
		subjectAlphas)

	return _.extend(priorInTheSky, subjectAlphas)
//	return _.flatten([priorInTheSky, subjectAlphas])

}
//utils.readinNumberTask()[1]['s0']

// var mhsamples = 1000

// var results = MH(inferPrITS,mhsamples)
// // var jsonResults = JSON.stringify(results)

// var tidyState = function(supportEl) {
// 	return flatmapObject(function(itemID,stateDist){
// 		return 	flatmapObject(function(stateID,prob){
// 						return [itemID, stateID, prob, Math.exp(results.score([], supportEl))]
// 						}, stateDist)
// 	}, supportEl)
// }

// var tidyAlpha = function(supportEl){
// 	return flatmapObject(function(alphaID,alphaVal){
// 		return _.isObject(alphaVal) ? 
// 						null : 
// 						['alpha', alphaID, alphaVal, Math.exp(results.score([], supportEl))]
// 	}, supportEl)
// }

// var posterior =
// 	_.flatten(
// 		_.flatten(
// 		map(
// 			tidyState,
// 			results.support()
// 			)
// 		,true),
// 		true)

// var alphaPosterior = 
// 	_.flatten(
// 		map(
// 			tidyAlpha,
// 			results.support()
// 			),
// 		true)


// var filename = 'modeling-results/number_pritsAlpha_mh' + mhsamples + 'a.csv'
// utils.writeCSV(posterior.concat(_.compact(alphaPosterior)), filename)






//results.support()[1]
// var posterior = map(
//   function(value){
//     var postprob = Math.exp(results.score([], value))
//     return _.extend({"prob":postprob},value)
//   },
//   results.support([]))

// var jsonResults = JSON.stringify(posterior)

// jsonResults

//posterior

// var posterior = map(
//   function(value){
  	
  	
// //    return value.concat(Math.exp(results.score([], value)))
//   },
//   results.support())

// posterior

// results.support().length
//value.concat(Math.exp(results.score([], results.support()[1])))
//printERP(results)
//priorInTheSky
//ntData[subjID]