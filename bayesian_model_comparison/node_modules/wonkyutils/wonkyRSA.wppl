
var numObjs = 15

var worldPrior = function() {
  var marbles = randomInteger(numObjs+1) //15 marbles... 0-15 can sink
  return marbles
}

var utterancePrior = function() {
  var utterances = [
                    "Some",
                    "All",
                    "None"
                    // "mu"
                    ]
 return uniformDraw(utterances)
  // return utterances[discrete([1,1,1,10])]
}

var meaning = function(utt,world) {
  return utt=="Some"? world>0 :
  utt=="All"? world==numObjs :
  utt=="None"? world==0 :
  utt=="mu"? true :
  true
}

var binomialMarbles = function(theta){
  return map(function(x){return Math.exp(binomialERP.score([theta, 15], x))},_.range(0,16))
}

// var empiricalPriors = wonkyutils.readPriors()
var literalListener = cache(function(utterance, prior) {
                            Enumerate(function(){
                                      var world = discrete(prior)
                                      var m = meaning(utterance, world)
                                      factor(m?0:-Infinity)
                                      return world
                                      })
                            })

var speaker = cache(function(world, prior, cooperativity) {
                    Enumerate(function(){
                              var utterance = utterancePrior()
                              var cooperate = flip(cooperativity)
                              var L = literalListener(utterance, prior)
                              var scr = cooperate ? L.score([],world) : 0
                              factor(scr)
                              // factor(0)
                              return utterance
                              })
                    })

var fillerSpeaker = cache(function(world, prior) {
                    Enumerate(function(){
                              var utterance = uniformDraw(["mu"])
                              var L = literalListener(utterance, prior)
                              factor(L.score([],world))
                              // console.log(world + L.score([],world) )
                              return utterance
                              })
                    })



var listener = function(utterance,wonkinessPrior,speakerOptimality,cooperativity, empiricalPrior) {
                      Enumerate(function(){
                                var wonky = flip(wonkinessPrior)
                                // var wonkiness = uniformDraw([0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99])
                                // var prior = binomialMarbles(wonkiness*0.5 + (1-wonkiness)*empiricalWeight)
                                var prior = wonky ? 
                                // binomialMarbles(0.5) :
                                  [1,1,1,1,1,
                                  1,1,1,1,1,
                                  1,1,1,1,1,
                                  1]:
                                    empiricalPrior
                                var world = discrete(prior)
                                var S = (utterance=='mu') ? fillerSpeaker(world, prior) : speaker(world, prior, cooperativity)
                                // console.log(wonky+ "..." + world +"..." + S.score([],utterance))
                                factor(speakerOptimality*S.score([],utterance))
                                var queryStatement = {"world":world,
                                                      "wonky":wonky}
                                return queryStatement
//                                return map(function(s){return [s,Math.exp(S.score([],s))]},S.support())
//                                return sample(S)
                                })
                    }



// speaker(5, binomialMarbles(0.5), 0.99)
// listener()

// var normalize = function(dist){
//   return map(function(x){return x/sum(dist)}, dist)
// }

// var erp = listener("Some", 0, 3, 1, 0.5)
// expectation(erp)

// var empirical =  [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,10] 
// var empirical_normalized = normalize(empirical)

// var backoff = [1,1,1,1,1,
//                                   1,1,1,1,1,
//                                   1,1,1,1,1,
//                                   1]

// var backoff_normalized = normalize(backoff)
// console.log( binomialMarbles(0.3))
// listener("Some", 0, 1, binomialMarbles(0.3))
// empirical_normalized


                                      // wonkyutils.fillArray(1,16) :
                                      // empiricalPriors[item]
                                      // [ 0.8,
                                      //     0.1,
                                      //     0.1013102,
                                      //     0.0160822,
                                      //     0.0076818,
                                      //     0.0359784,
                                      //     0.0054297,
                                      //     0.0008195,
                                      //     0.0001238,
                                      //     0.0000188,
                                      //     0.0000029,
                                      //     5e-7,
                                      //     2e-7,
                                      //     1e-7,
                                      //     1e-7,
                                      //     1e-7 ]
                                    // [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,10]

