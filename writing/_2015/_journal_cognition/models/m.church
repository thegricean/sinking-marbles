
(define (rep n val) (repeat n (lambda () val)))

(define (power dist a) (list (first dist)
                           (map (lambda (x) (pow x a)) (second dist))))

(define (meaning utterance marbles total-marbles)
  (case utterance
        (('all) (= marbles total-marbles))
        (('none) (= marbles 0))
        (('some) (> marbles 0))
        (('most) (> marbles (/ total-marbles 2)))
        (('many) (> marbles (/ total-marbles 2)))
    	(('morethanhalf) (> marbles (/ total-marbles 2)))
        (('one) (= marbles 1))
        (('two) (= marbles 2))
        (('three) (= marbles 3))
        (('four) (= marbles 4))
        (('five) (= marbles 5))
        (('six) (= marbles 6))
        (('seven) (= marbles 7))
        (('eight) (= marbles 8))
        (('nine) (= marbles 9))
        (('ten) (= marbles 10))
        (('eleven) (= marbles 11))
        (('twelve) (= marbles 12))
        (('thirteen) (= marbles 13))
        (('fourteen) (= marbles 14))
        (('fifteen) (= marbles 15))
        (('almostall) (and (> marbles (* .75 total-marbles)) (< marbles total-marbles)))
        (('half) (= marbles (/ total-marbles 2)))
        (('acouple) (= marbles 2))
        (('notone) (= marbles 0))
        (('onlyone) (= marbles 1))
        (('everyone) (= marbles total-marbles))
        (('notmany) (< marbles (/ total-marbles 2)))
        (('justone) (= marbles 1))
        (('almostnone) (and (> marbles 0) (< marbles (* .25 total-marbles))))
        (('allbutone) (= marbles (- total-marbles 1)))
        (('lessthanhalf) (< marbles (/ total-marbles 2)))
        (('overhalf) (> marbles (/ total-marbles 2)))
        (('several) (> marbles 2))
        (('afew) (and (< marbles (* total-marbles .7)) (> marbles 1)))
        (('veryfew) (< marbles (/ total-marbles 2)))
        (('alot) (> marbles (/ total-marbles 2)))
        ))

(define (QUD-cell QUD marbles total-marbles)
  (case QUD
        (('is-all) (= marbles total-marbles))
        (('is-any) (> marbles 0))
        (('how-many) marbles)))

(define (quantifier quantifier-alternatives) (uniform-draw quantifier-alternatives))

(define (marble-state theprior)
	(multinomial '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) theprior))

(define literal-listener
  (mem (lambda (utterance QUD total-marbles quantifier-alternatives allprior)
         (enumeration-query
;          (define marbles (marble-state allprior))
          (define marbles (uniform-draw  '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)))

          (QUD-cell QUD marbles total-marbles)

          (meaning utterance marbles total-marbles)))))

(define pragmatic-speaker
  (mem (lambda (marbles QUD total-marbles quantifier-alternatives allprior)
         (enumeration-query
          (define utterance (quantifier quantifier-alternatives))
          utterance
          (and
           (equal? (QUD-cell QUD marbles total-marbles)
                   (apply multinomial
                          (literal-listener utterance QUD total-marbles quantifier-alternatives allprior)))
           (meaning utterance marbles total-marbles))))))

(define (pragmatic-listener utterance QUD total-marbles quantifier-alternatives allprior speaker-opt)
	(enumeration-query
		(define marbles (marble-state allprior))
		marbles
		(equal? utterance (apply multinomial
                                 (power (pragmatic-speaker marbles QUD total-marbles quantifier-alternatives allprior)
                                        speaker-opt)))))

; modify available alternatives at will
(define alternatives '(some all none))

; modify the prior on states at will
(define theprior (list 2.96455132725021e-14 2.57131562348768e-10 1.70437848916888e-08 2.74550143972162e-07 2.23227914044718e-06 1.21412086386673e-05 5.07759916187051e-05 0.000176867797564236 0.000540010720540726 0.00149787469104472 0.00388129552403355 0.00963256910496703 0.0235320577675172 0.0588966063276065 0.164558714447637 0.737218562288601))

(define item '("9_0.1"))

(write-csv
	(list
	'(alternatives)
	(list alternatives)
	'(item)
	(list item)
	'(prior)
	(list theprior)
	'(quantifier some)
	'(qud how-many)
	'(speaker-opt 0)
	(pragmatic-listener 'some 'how-many 15 alternatives theprior 0)
	'(speaker-opt 1)
	(pragmatic-listener 'some 'how-many 15 alternatives theprior 1)
	'(speaker-opt 2)
	(pragmatic-listener 'some 'how-many 15 alternatives theprior 2)
	'(speaker-opt 3)
	(pragmatic-listener 'some 'how-many 15 alternatives theprior 3)
;	'(speaker-opt 5)
;	(pragmatic-listener 'some 'how-many 15 alternatives theprior 5)
	'(speaker-opt 10)
	(pragmatic-listener 'some 'how-many 15 alternatives theprior 10)
;	'(speaker-opt 15)
;	(pragmatic-listener 'some 'how-many 15 alternatives theprior 15)
;	'(speaker-opt 20)
;	(pragmatic-listener 'some 'how-many 15 alternatives theprior 20)
	)
	"/Users/titlis/cogsci/projects/stanford/projects/thegricean_sinking-marbles/writing/_2015/_journal_cognition/models/modelresults/raw_rsa_betapriors_results.txt.tmp.results"
	","
)